---
import { BENEFITS } from '@/constanst/benefits';
import Heading from '../Heading.astro';
---

<section
  id="benefits"
  class="h-full w-full 2xl:h-screen place-content-center mx-auto py-24"
>
  <div class="w-11/12 xl:w-4/5 mx-auto flex-col-center gap-12">
    <Heading
      label="Todo lo que necesitas"
      title="Beneficios clave"
      description="DomiSys transforma la manera en que gestionas tu negocio, optimizando cada aspecto desde el inventario hasta las entregas."
    />

    <article
      class="lg:w-4/5 grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6"
    >
      {
        BENEFITS.map(({ icon: Icon, description, title }, index) => (
          <div
            id="card-animated"
            class={`flex flex-col justify-center  gap-2 p-6 rounded-lg transition-all duration-500 
            surface-glass border border-white/5 shadow shadow-black/50 opacity-0 translate-y-20
            ${index === 8 && 'max-xl:col-span-full'}`}
            style={`transition-delay: ${index * 60}ms;`}
          >
            <div class="flex items-center gap-3">
              <div class="p-2 text-brand-primary bg-brand-primary/20 rounded-lg transition-all duration-200">
                <Icon />
              </div>
              <h3 class="text-2xl font-medium text-custom-neutral">{title}</h3>
            </div>
            <p class="font-light">{description}</p>
          </div>
        ))
      }
    </article>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('#card-animated');
    const section = document.getElementById('benefits');

    if (!cards.length || !section) return;

    const observerCards = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.remove('opacity-0', 'translate-y-20');
            entry.target.classList.add('opacity-100', 'translate-y-0');
          }
        });
      },
      { threshold: 0.2 }
    );

    cards.forEach((card) => observerCards.observe(card));

    const observerSection = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          cards.forEach((card) => {
            card.classList.add('opacity-100', 'translate-y-0');
          });
        }
      },
      { threshold: 1 }
    );

    observerSection.observe(section);
  });
</script>
